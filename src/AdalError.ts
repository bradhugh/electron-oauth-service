import { AdalErrorCode } from "./AdalErrorCode";
import { AdalErrorMessage } from "./Constants";

export enum ErrorFormat {
    Json,
    Other,
}

/// <summary>
/// The exception type thrown when an error occurs during token acquisition.
/// </summary>
export class AdalError extends Error {

    public static getErrorMessage(errorCode: string): string {
        let message: string = null;
        switch (errorCode) {
            case AdalErrorCode.invalidCredentialType:
                message = AdalErrorMessage.invalidCredentialType;
                break;

            case AdalErrorCode.identityProtocolLoginUrlNull:
                message = AdalErrorMessage.identityProtocolLoginUrlNull;
                break;

            case AdalErrorCode.identityProtocolMismatch:
                message = AdalErrorMessage.identityProtocolMismatch;
                break;

            case AdalErrorCode.emailAddressSuffixMismatch:
                message = AdalErrorMessage.emailAddressSuffixMismatch;
                break;

            case AdalErrorCode.identityProviderRequestFailed:
                message = AdalErrorMessage.identityProviderRequestFailed;
                break;

            case AdalErrorCode.stsTokenRequestFailed:
                message = AdalErrorMessage.stsTokenRequestFailed;
                break;

            case AdalErrorCode.encodedTokenTooLong:
                message = AdalErrorMessage.encodedTokenTooLong;
                break;

            case AdalErrorCode.stsMetadataRequestFailed:
                message = AdalErrorMessage.stsMetadataRequestFailed;
                break;

            case AdalErrorCode.authorityNotInValidList:
                message = AdalErrorMessage.authorityNotInValidList;
                break;

            case AdalErrorCode.unknownUserType:
                message = AdalErrorMessage.unknownUserType;
                break;

            case AdalErrorCode.unknownUser:
                message = AdalErrorMessage.unknownUser;
                break;

            case AdalErrorCode.userRealmDiscoveryFailed:
                message = AdalErrorMessage.userRealmDiscoveryFailed;
                break;

            case AdalErrorCode.accessingWsMetadataExchangeFailed:
                message = AdalErrorMessage.accessingMetadataDocumentFailed;
                break;

            case AdalErrorCode.parsingWsMetadataExchangeFailed:
                message = AdalErrorMessage.parsingMetadataDocumentFailed;
                break;

            case AdalErrorCode.wsTrustEndpointNotFoundInMetadataDocument:
                message = AdalErrorMessage.wsTrustEndpointNotFoundInMetadataDocument;
                break;

            case AdalErrorCode.parsingWsTrustResponseFailed:
                message = AdalErrorMessage.parsingWsTrustResponseFailed;
                break;

            case AdalErrorCode.authenticationCanceled:
                message = AdalErrorMessage.authenticationCanceled;
                break;

            case AdalErrorCode.networkNotAvailable:
                message = AdalErrorMessage.networkIsNotAvailable;
                break;

            case AdalErrorCode.authenticationUiFailed:
                message = AdalErrorMessage.authenticationUiFailed;
                break;

            case AdalErrorCode.userInteractionRequired:
                message = AdalErrorMessage.userInteractionRequired;
                break;

            case AdalErrorCode.missingFederationMetadataUrl:
                message = AdalErrorMessage.missingFederationMetadataUrl;
                break;

            case AdalErrorCode.integratedAuthFailed:
                message = AdalErrorMessage.integratedAuthFailed;
                break;

            case AdalErrorCode.unauthorizedResponseExpected:
                message = AdalErrorMessage.unauthorizedResponseExpected;
                break;

            case AdalErrorCode.multipleTokensMatched:
                message = AdalErrorMessage.multipleTokensMatched;
                break;

            case AdalErrorCode.passwordRequiredForManagedUserError:
                message = AdalErrorMessage.passwordRequiredForManagedUserError;
                break;

            case AdalErrorCode.getUserNameFailed:
                message = AdalErrorMessage.getUserNameFailed;
                break;

            case AdalErrorCode.interactionRequired:
                message = AdalErrorMessage.interactionRequired;
                break;

            default:
                message = AdalErrorMessage.unknown;
                break;
        }

        return `${errorCode}: ${message}`;
    }

    /// <summary>
    ///  Initializes a new instance of the exception class with a specified
    ///  error code, error message and a reference to the inner exception that is the cause of
    ///  this exception.
    /// </summary>
    /// <param name="errorCode">The error code returned by the service or generated by client.
    /// This is the code you can rely on for exception handling.</param>
    /// <param name="message">The error message that explains the reason for the exception.</param>
    /// <param name="innerError">The exception that is the cause of the current exception,
    /// or a null reference if no inner exception is specified. It may especially contain
    /// the actual error message returned by the service.</param>
    constructor(public errorCode: string, public message: string, public innerError: Error) {
        super(message);
    }

    /// <summary>
    /// Creates and returns a string representation of the current exception.
    /// </summary>
    /// <returns>A string representation of the current exception.</returns>
    public toString(): string {
        return `${this.message}\nErrorCode: ${this.errorCode}`;
    }
}
