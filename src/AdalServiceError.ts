import { AdalError } from "./AdalError";
import { HttpHeaderCollection } from "./internal/http/HttpHeaderCollection";
import { HttpStatusCode } from "./internal/http/HttpStatusCode";

/// <summary>
/// The exception type thrown when user returned by service does not match user in the request.
/// </summary>
export class AdalServiceError extends AdalError {

    /// <summary>
    /// Gets the status code returned from http layer. This status code is either the
    ///  HttpStatusCode in the inner HttpRequestException response or
    /// NavigateError Event Status Code in browser based flow
    /// (See http://msdn.microsoft.com/en-us/library/bb268233(v=vs.85).aspx).
    /// You can use this code for purposes such as implementing retry logic or error investigation.
    /// </summary>
    public statusCode: HttpStatusCode = 0;

    /// <summary>
    /// Contains headers from the response that indicated an error
    /// </summary>
    public headers: HttpHeaderCollection;

    /// <summary>
    ///  Initializes a new instance of the exception class with a specified
    ///  error code, error message and a reference to the inner exception that is the cause of
    ///  this exception.
    /// </summary>
    /// <param name="errorCode">The protocol error code returned by the service or generated by client.
    /// This is the code you can rely on for exception handling.</param>
    /// <param name="message">The error message that explains the reason for the exception.</param>
    /// <param name="serviceErrorCodes">The specific error codes that may be returned by the service.</param>
    /// <param name="innerException">The exception that is the cause of the current exception,
    /// or a null reference if no inner exception is specified. It may especially contain the
    /// actual error message returned by the service.</param>
    constructor(errorCode: string, message: string, public serviceErrorCodes: string[], innerError: Error) {
        super(errorCode, message ? message : AdalServiceError.getErrorMessage(errorCode), innerError);

        // var httpRequestWrapperException = (innerException as HttpRequestWrapperException);
        // if (httpRequestWrapperException != null)
        // {
        //     IHttpWebResponse response = httpRequestWrapperException.WebResponse;
        //     if (response != null)
        //     {
        //         this.StatusCode = (int)response.StatusCode;
        //         this.Headers = response.Headers;
        //     }
        //     else if (innerException.InnerException is TaskCanceledException)
        //     {
        //         var taskCanceledException = ((TaskCanceledException)(innerException.InnerException));
        //         if (!taskCanceledException.CancellationToken.IsCancellationRequested)
        //         {
        //             this.StatusCode = (int)HttpStatusCode.RequestTimeout;
        //         }
        //         else
        //         {
        //             // There is no HttpStatusCode for user cancelation
        //             this.StatusCode = 0;
        //         }
        //     }
        //     else
        //     {
        //         this.StatusCode = 0;
        //     }
        // }
    }

    /// <summary>
    /// Creates and returns a string representation of the current exception.
    /// </summary>
    /// <returns>A string representation of the current exception.</returns>
    public toString(): string {
        return super.toString() + `\n\tStatusCode: ${this.statusCode}`;
    }
}
